--- a/proton
+++ b/proton
@@ -53,7 +53,7 @@
 def try_copy(src, dst):
     try:
         if os.path.isdir(dst):
-            dstfile = dst + "/" + os.path.basename(src)
+            dstfile = os.path.join(dst, os.path.basename(src))
             if os.path.lexists(dstfile):
                 os.remove(dstfile)
         elif os.path.lexists(dst):
@@ -101,16 +101,16 @@
         self.base_dir  = self.conf_path("base_dir",  base_dir + "/")
         self.dist_dir  = self.conf_path("dist_dir",  self.path("dist/"))
 
-        self.bin_dir   = self.conf_path("bin_dir",   self.path(self.dist_dir + "bin/"))
-        self.lib_dir   = self.conf_path("lib_dir",   self.path(self.dist_dir + "lib/"))
-        self.lib64_dir = self.conf_path("lib64_dir", self.path(self.dist_dir + "lib64/"))
-        self.fonts_dir = self.conf_path("fonts_dir", self.path(self.dist_dir + "share/fonts/"))
+        self.bin_dir   = self.conf_path("bin_dir",   self.path(self.dist_dir, "bin/"))
+        self.lib_dir   = self.conf_path("lib_dir",   self.path(self.dist_dir, "lib/"))
+        self.lib64_dir = self.conf_path("lib64_dir", self.path(self.dist_dir, "lib64/"))
+        self.fonts_dir = self.conf_path("fonts_dir", self.path(self.dist_dir, "share/fonts/"))
 
-        self.default_pfx_dir = self.conf_path("default_pfx_dir", self.path(self.dist_dir + "share/default_pfx/"))
+        self.default_pfx_dir = self.conf_path("default_pfx_dir", self.path(self.dist_dir, "share/default_pfx/"))
 
         self.version_file = self.conf_path("version_file", self.path("version"))
         self.dist_lock_file = self.conf_path("dist_lock_file", self.path("dist.lock"))
-        self.dist_version_file = self.conf_path("dist_version_file", self.path(self.dist_dir + "version"))
+        self.dist_version_file = self.conf_path("dist_version_file", self.path(self.dist_dir, "version"))
         self.user_settings_file = self.conf_path("user_settings_file", self.path("user_settings.py"))
 
         self.wine_bin = self.conf_path("wine_bin", self.bin_dir + "wine")
@@ -118,8 +118,8 @@
 
         self.dist_lock = FileLock(self.dist_lock_file, timeout=-1)
 
-    def path(self, d):
-        return self.base_dir + d
+    def path(self, *d):
+        return os.path.join(self.base_dir, *d)
 
     def conf_path(self, n, f):
         return os.path.expanduser(self.conf.get("paths", n, fallback = f))
@@ -161,8 +161,11 @@
         self.tracked_files_file = self.path("tracked_files")
         self.prefix_lock = FileLock(self.path("pfx.lock"), timeout=-1)
 
-    def path(self, d):
-        return self.base_dir + d
+    def path(self, *d):
+        return os.path.join(self.base_dir, *d)
+
+    def pfx_path(self, *d):
+        return os.path.join(self.prefix_dir, *d)
 
     def remove_tracked_files(self):
         if not os.path.exists(self.tracked_files_file):
@@ -175,7 +175,7 @@
         with open(self.tracked_files_file, "r") as tracked_files:
             dirs = []
             for f in tracked_files:
-                path = self.prefix_dir + f.strip()
+                path = self.pfx_path(f.strip())
                 if os.path.exists(path):
                     if os.path.isfile(path) or os.path.islink(path):
                         os.remove(path)
@@ -207,18 +207,18 @@
                 return
 
             if old_proton_ver == "3.7" and old_prefix_ver == "1":
-                if not os.path.exists(self.prefix_dir + "/drive_c/windows/syswow64/kernel32.dll"):
+                if not os.path.exists(self.pfx_path("/drive_c/windows/syswow64/kernel32.dll")):
                     #shipped a busted 64-bit-only installation on 20180822. detect and wipe clean
                     log("Detected broken 64-bit-only installation, re-creating prefix.")
                     shutil.rmtree(self.prefix_dir)
                     return
 
             #replace broken .NET installations with wine-mono support
-            if os.path.exists(self.prefix_dir + "/drive_c/windows/Microsoft.NET/NETFXRepair.exe") and \
-                    file_is_wine_fake_dll(self.prefix_dir + "/drive_c/windows/system32/mscoree.dll"):
+            if os.path.exists(self.pfx_path("/drive_c/windows/Microsoft.NET/NETFXRepair.exe")) and \
+                    file_is_wine_fake_dll(self.pfx_path("/drive_c/windows/system32/mscoree.dll")):
                 log("Broken .NET installation detected, switching to wine-mono.")
                 #deleting this directory allows wine-mono to work
-                shutil.rmtree(self.prefix_dir + "/drive_c/windows/Microsoft.NET")
+                shutil.rmtree(self.pfx_path("/drive_c/windows/Microsoft.NET"))
 
        #prior to prefix version 4.11-2, all controllers were xbox controllers. wipe out the old registry entries.
        if (int(old_proton_maj) < 4 or (int(old_proton_maj) == 4 and int(old_proton_min) == 11)) and \
@@ -280,7 +280,7 @@
             ( "SourceHanSansSCRegular.otf", "msyh.ttf" ),
         ]
 
-        windowsfonts = self.prefix_dir + "/drive_c/windows/Fonts"
+        windowsfonts = self.pfx_path("/drive_c/windows/Fonts")
         makedirs(windowsfonts)
         for p in fontsmap:
             lname = os.path.join(windowsfonts, p[1])
@@ -301,10 +301,10 @@
                 self.upgrade_pfx(None)
 
             if not os.path.exists(self.prefix_dir):
-                makedirs(self.prefix_dir + "/drive_c")
-                set_dir_casefold_bit(self.prefix_dir + "/drive_c")
+                makedirs(self.pfx_path("/drive_c"))
+                set_dir_casefold_bit(self.pfx_path("/drive_c"))
 
-            if not os.path.exists(self.prefix_dir + "/user.reg"):
+            if not os.path.exists(self.pfx_path("/user.reg")):
                 self.copy_pfx()
 
             with open(self.version_file, "w") as f:
@@ -320,7 +320,7 @@
             else:
                 #linux-only fallback, really shouldn't get here
                 steamdir = os.environ["HOME"] + ".steam/root/"
-            dst = self.prefix_dir + "/drive_c/Program Files (x86)/"
+            dst = self.pfx_path("/drive_c/Program Files (x86)/")
             makedirs(dst + "Steam")
             filestocopy = ["steamclient.dll",
                     "steamclient64.dll",
@@ -378,17 +378,17 @@
                     wined3dfiles.append("dxgi")
 
             for f in wined3dfiles:
-                try_copy(g_proton.default_pfx_dir + "drive_c/windows/system32/" + f + ".dll",
-                        self.prefix_dir + "drive_c/windows/system32/" + f + ".dll")
-                try_copy(g_proton.default_pfx_dir + "drive_c/windows/syswow64/" + f + ".dll",
-                        self.prefix_dir + "drive_c/windows/syswow64/" + f + ".dll")
+                try_copy(os.path.join(g_proton.default_pfx_dir, "drive_c/windows/system32/" + f + ".dll"),
+                        self.pfx_path("drive_c/windows/system32/" + f + ".dll"))
+                try_copy(os.path.join(g_proton.default_pfx_dir, "drive_c/windows/syswow64/" + f + ".dll"),
+                        self.pfx_path("drive_c/windows/syswow64/" + f + ".dll"))
 
             '''
             for f in dxvkfiles:
-                try_copy(g_proton.lib64_dir + "wine/dxvk/" + f + ".dll",
-                        self.prefix_dir + "drive_c/windows/system32/" + f + ".dll")
-                try_copy(g_proton.lib_dir + "wine/dxvk/" + f + ".dll",
-                        self.prefix_dir + "drive_c/windows/syswow64/" + f + ".dll")
+                try_copy(os.path.join(g_proton.lib64_dir,"wine/dxvk/" + f + ".dll"),
+                        self.pfx_path("drive_c/windows/system32/" + f + ".dll"))
+                try_copy(os.path.join(g_proton.lib_dir, "wine/dxvk/" + f + ".dll"),
+                        self.pfx_path("drive_c/windows/syswow64/" + f + ".dll"))
                 g_session.dlloverrides[f] = "n"
             '''
             class Session:
